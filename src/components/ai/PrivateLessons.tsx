import { useState, useEffect, useCallback, useRef } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  User, 
  Bot, 
  Mic, 
  MicOff, 
  Play, 
  Pause, 
  Volume2, 
  VolumeX,
  Settings,
  Sparkles,
  Brain,
  BookOpen,
  Target,
  Clock,
  Star,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Lightbulb,
  MessageSquare,
  Send,
  RefreshCw,
  Zap,
  Award,
  Calendar,
  Timer,
  Bookmark,
  Heart,
  Eye,
  EyeOff,
  ChevronDown,
  ChevronUp,
  Plus,
  Minus,
  RotateCcw,
  Save,
  Download,
  Share2,
  Book,
  GraduationCap,
  Languages,
  Globe,
  Users,
  Coffee,
  ShoppingCart,
  Plane,
  Hotel,
  Utensils,
  Workflow,
  HeartHandshake,
  Trophy,
  Crown,
  Medal,
  Flag,
  Music,
  Camera,
  Video,
  Headphones,
  Speaker,
  Monitor,
  Smartphone,
  Tablet,
  Laptop,
  Desktop,
  Wifi,
  WifiOff,
  Battery,
  BatteryCharging,
  Signal,
  SignalHigh,
  SignalMedium,
  SignalLow,
  WifiOff as NoSignal,
  Edit
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import FadeIn from "@/components/animations/FadeIn";
import { useTranslation } from 'react-i18next';

interface LessonSession {
  id: string;
  title: string;
  description: string;
  type: 'conversation' | 'grammar' | 'pronunciation' | 'vocabulary' | 'writing' | 'listening' | 'reading';
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  language: string;
  duration: number; // in minutes
  progress: number; // 0-100
  completed: boolean;
  aiTutor: string;
  focusAreas: string[];
  materials: string[];
  notes: string;
  rating?: number;
  feedback?: string;
  createdAt: Date;
  completedAt?: Date;
}

interface TutorProfile {
  id: string;
  name: string;
  avatar: string;
  specialty: string[];
  languages: string[];
  teachingStyle: string;
  experience: string;
  rating: number;
  totalStudents: number;
  totalLessons: number;
  availability: string[];
  bio: string;
  accent: string;
  personality: string;
}

interface LessonMaterial {
  id: string;
  type: 'text' | 'audio' | 'video' | 'image' | 'interactive';
  title: string;
  content: string;
  duration?: number;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  tags: string[];
}

interface LessonMessage {
  id: string;
  sender: 'student' | 'tutor';
  content: string;
  timestamp: Date;
  type: 'text' | 'audio' | 'correction' | 'explanation' | 'question' | 'encouragement';
  translation?: string;
  pronunciation?: string;
  grammar?: string;
  confidence?: number;
  feedback?: string;
}

interface LessonStats {
  totalLessons: number;
  totalTime: number; // in minutes
  averageRating: number;
  favoriteTutor: string;
  mostPracticedSkill: string;
  currentStreak: number;
  weeklyGoal: number;
  weeklyProgress: number;
  improvementAreas: string[];
  achievements: string[];
}

const PrivateLessons = () => {
  const { t } = useTranslation();
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState("sessions");
  const [selectedLanguage, setSelectedLanguage] = useState<string>("Hindi");
  const [isListening, setIsListening] = useState(false);
  const [isAISpeaking, setIsAISpeaking] = useState(false);
  const [currentSession, setCurrentSession] = useState<LessonSession | null>(null);
  const [messages, setMessages] = useState<LessonMessage[]>([]);
  const [userInput, setUserInput] = useState("");
  const [sessionActive, setSessionActive] = useState(false);
  const [selectedTutor, setSelectedTutor] = useState<TutorProfile | null>(null);
  const [lessonType, setLessonType] = useState<string>("conversation");
  const [sessionDuration, setSessionDuration] = useState(30);
  const [recognition, setRecognition] = useState<any>(null);
  const [selectedLessonType, setSelectedLessonType] = useState<string>("conversation");
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const [stats, setStats] = useState<LessonStats>({
    totalLessons: 24,
    totalTime: 720,
    averageRating: 4.6,
    favoriteTutor: "Professor Sharma",
    mostPracticedSkill: "Conversation",
    currentStreak: 7,
    weeklyGoal: 5,
    weeklyProgress: 3,
    improvementAreas: ['Grammar', 'Pronunciation', 'Vocabulary'],
    achievements: ['First Lesson', 'Week Streak', 'Grammar Master', 'Conversation Pro']
  });

  // Initialize speech recognition
  useEffect(() => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      const recognition = new SpeechRecognition();
      recognition.continuous = true;
      recognition.interimResults = true;
      recognition.lang = 'hi-IN'; // Hindi
      setRecognition(recognition);
    }
  }, []);

  // Auto-scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Cleanup speech synthesis on unmount
  useEffect(() => {
    return () => {
      if ('speechSynthesis' in window) {
        window.speechSynthesis.cancel();
      }
    };
  }, []);

  const tutors: TutorProfile[] = [
    {
      id: "1",
      name: "Professor Sharma",
      avatar: "üë®‚Äçüè´",
      specialty: ["Conversation", "Grammar", "Business Hindi"],
      languages: ["Hindi", "English", "Sanskrit"],
      teachingStyle: "Patient and encouraging, focuses on practical usage",
      experience: "15+ years teaching Hindi to international students",
      rating: 4.8,
      totalStudents: 1200,
      totalLessons: 5000,
      availability: ["Mon-Fri 9AM-6PM", "Sat 10AM-2PM"],
      bio: "Expert in modern Hindi with deep knowledge of cultural context",
      accent: "Standard Hindi",
      personality: "Warm and professional"
    },
    {
      id: "2",
      name: "Priya Patel",
      avatar: "üë©‚Äçüè´",
      specialty: ["Pronunciation", "Slang", "Cultural Context"],
      languages: ["Hindi", "Gujarati", "English"],
      teachingStyle: "Interactive and fun, uses real-life examples",
      experience: "8 years specializing in conversational Hindi",
      rating: 4.9,
      totalStudents: 800,
      totalLessons: 3200,
      availability: ["Mon-Sun 8AM-8PM"],
      bio: "Makes learning Hindi enjoyable with cultural insights",
      accent: "Mumbai Hindi",
      personality: "Energetic and friendly"
    },
    {
      id: "3",
      name: "Dr. Rajesh Kumar",
      avatar: "üë®‚Äçüéì",
      specialty: ["Academic Writing", "Literature", "Advanced Grammar"],
      languages: ["Hindi", "English", "Urdu"],
      teachingStyle: "Structured and comprehensive, academic approach",
      experience: "20+ years in Hindi literature and linguistics",
      rating: 4.7,
      totalStudents: 600,
      totalLessons: 2800,
      availability: ["Mon-Fri 2PM-8PM", "Sat 9AM-5PM"],
      bio: "PhD in Hindi Literature, expert in classical and modern Hindi",
      accent: "Delhi Hindi",
      personality: "Scholarly and thorough"
    }
  ];

  const lessonTypes = [
    { id: "conversation", name: "Conversation Practice", icon: MessageSquare, description: "Practice everyday conversations" },
    { id: "grammar", name: "Grammar Focus", icon: BookOpen, description: "Master grammar rules and structures" },
    { id: "pronunciation", name: "Pronunciation", icon: Mic, description: "Perfect your accent and pronunciation" },
    { id: "vocabulary", name: "Vocabulary Building", icon: Brain, description: "Expand your word knowledge" },
    { id: "writing", name: "Writing Skills", icon: Edit, description: "Improve writing and composition" },
    { id: "listening", name: "Listening Comprehension", icon: Headphones, description: "Enhance listening skills" },
    { id: "reading", name: "Reading Practice", icon: Book, description: "Practice reading and comprehension" }
  ];

  const startLesson = useCallback((tutor: TutorProfile, type: string) => {
    const newSession: LessonSession = {
      id: Date.now().toString(),
      title: `${type.charAt(0).toUpperCase() + type.slice(1)} Lesson with ${tutor.name}`,
      description: `Personalized ${type} lesson with ${tutor.name}`,
      type: type as any,
      difficulty: 'intermediate',
      language: selectedLanguage,
      duration: sessionDuration,
      progress: 0,
      completed: false,
      aiTutor: tutor.name,
      focusAreas: tutor.specialty,
      materials: [],
      notes: "",
      createdAt: new Date()
    };

    setCurrentSession(newSession);
    setSelectedTutor(tutor);
    setLessonType(type);
    setSelectedLessonType(type);
    setSessionActive(true);
    setMessages([]);

    // Generate greeting inline
    const greetings = {
      conversation: `‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ${tutor.name} ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§π‡§Æ ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§ ‡§ï‡•à‡§∏‡•á ‡§π‡•à‡§Ç ‡§Ü‡§™?`,
      grammar: `‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ${tutor.name} ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§π‡§Æ ‡§µ‡•ç‡§Ø‡§æ‡§ï‡§∞‡§£ ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç‡§ó‡•á‡•§ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡§Ç?`,
      pronunciation: `‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ${tutor.name} ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§π‡§Æ ‡§â‡§ö‡•ç‡§ö‡§æ‡§∞‡§£ ‡§™‡§∞ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç!`,
      vocabulary: `‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ${tutor.name} ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§π‡§Æ ‡§®‡§è ‡§∂‡§¨‡•ç‡§¶ ‡§∏‡•Ä‡§ñ‡•á‡§Ç‡§ó‡•á‡•§ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡§Ç?`,
      writing: `‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ${tutor.name} ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§π‡§Æ ‡§≤‡•á‡§ñ‡§® ‡§ï‡•å‡§∂‡§≤ ‡§™‡§∞ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§`,
      listening: `‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ${tutor.name} ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§π‡§Æ ‡§∏‡•Å‡§®‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç‡§ó‡•á‡•§`,
      reading: `‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ${tutor.name} ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§π‡§Æ ‡§™‡§¢‡§º‡§®‡•á ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§`
    };
    const greeting = greetings[type as keyof typeof greetings] || greetings.conversation;

    // Add initial greeting
    const initialMessage: LessonMessage = {
      id: Date.now().toString(),
      sender: 'tutor',
      content: greeting,
      timestamp: new Date(),
      type: 'text'
    };
    setMessages([initialMessage]);

    // Speak the greeting using a simple approach
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(greeting);
      utterance.lang = 'hi-IN';
      utterance.rate = 0.8;
      utterance.volume = 1.0;
      speechSynthesis.speak(utterance);
    }

    // Switch to active lesson tab
    setActiveTab("active");

    toast({
      title: "Lesson Started!",
      description: `Your ${type} lesson with ${tutor.name} has begun.`,
    });
  }, [selectedLanguage, sessionDuration, toast, setActiveTab]);

  const generateTutorGreeting = useCallback((tutor: TutorProfile, type: string): string => {
    const greetings = {
      conversation: `‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ${tutor.name} ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§π‡§Æ ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§ ‡§ï‡•à‡§∏‡•á ‡§π‡•à‡§Ç ‡§Ü‡§™?`,
      grammar: `‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ${tutor.name} ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§π‡§Æ ‡§µ‡•ç‡§Ø‡§æ‡§ï‡§∞‡§£ ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç‡§ó‡•á‡•§ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡§Ç?`,
      pronunciation: `‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ${tutor.name} ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§π‡§Æ ‡§â‡§ö‡•ç‡§ö‡§æ‡§∞‡§£ ‡§™‡§∞ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç!`,
      vocabulary: `‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ${tutor.name} ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§π‡§Æ ‡§®‡§è ‡§∂‡§¨‡•ç‡§¶ ‡§∏‡•Ä‡§ñ‡•á‡§Ç‡§ó‡•á‡•§ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡§Ç?`,
      writing: `‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ${tutor.name} ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§π‡§Æ ‡§≤‡•á‡§ñ‡§® ‡§ï‡•å‡§∂‡§≤ ‡§™‡§∞ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§`,
      listening: `‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ${tutor.name} ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§π‡§Æ ‡§∏‡•Å‡§®‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç‡§ó‡•á‡•§`,
      reading: `‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ${tutor.name} ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§π‡§Æ ‡§™‡§¢‡§º‡§®‡•á ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§`
    };
    return greetings[type as keyof typeof greetings] || greetings.conversation;
  }, []);

  const generateFollowUpQuestion = useCallback((type: string): string | null => {
    const followUps = {
      conversation: [
        "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•á ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§Ü‡§™‡§ï‡§æ ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§ñ‡§æ‡§®‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
        "‡§Ü‡§™ ‡§Ö‡§™‡§®‡•á ‡§¶‡§ø‡§® ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§¨‡§§‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç?"
      ],
      grammar: [
        "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§á‡§∏ ‡§µ‡§æ‡§ï‡•ç‡§Ø ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§ó‡§≤‡§§‡•Ä ‡§¢‡•Ç‡§Ç‡§¢ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§á‡§∏ ‡§®‡§ø‡§Ø‡§Æ ‡§ï‡•ã ‡§î‡§∞ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•ã‡§à ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§æ‡§ï‡§∞‡§£ ‡§®‡§ø‡§Ø‡§Æ ‡§∏‡•Ä‡§ñ‡§®‡§æ ‡§π‡•à?"
      ],
      pronunciation: [
        "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§á‡§∏ ‡§∂‡§¨‡•ç‡§¶ ‡§ï‡§æ ‡§â‡§ö‡•ç‡§ö‡§æ‡§∞‡§£ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§Ö‡§¨ ‡§è‡§ï ‡§î‡§∞ ‡§∂‡§¨‡•ç‡§¶ ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•ã‡§à ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§∂‡§¨‡•ç‡§¶ ‡§∏‡•Ä‡§ñ‡§®‡§æ ‡§π‡•à?"
      ],
      vocabulary: [
        "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§®‡§è ‡§∂‡§¨‡•ç‡§¶ ‡§∏‡•Ä‡§ñ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§á‡§∏ ‡§∂‡§¨‡•ç‡§¶ ‡§ï‡§æ ‡§µ‡§æ‡§ï‡•ç‡§Ø ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•ã‡§à ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§µ‡§ø‡§∑‡§Ø ‡§ï‡•á ‡§∂‡§¨‡•ç‡§¶ ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§π‡•à‡§Ç?"
      ],
      writing: [
        "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§è‡§ï ‡§õ‡•ã‡§ü‡§æ ‡§®‡§ø‡§¨‡§Ç‡§ß ‡§≤‡§ø‡§ñ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§á‡§∏ ‡§µ‡§ø‡§∑‡§Ø ‡§™‡§∞ ‡§≤‡§ø‡§ñ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§è‡§ï ‡§™‡§§‡•ç‡§∞ ‡§≤‡§ø‡§ñ‡§®‡•á ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?"
      ],
      listening: [
        "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§ï‡•Å‡§õ ‡§î‡§∞ ‡§∏‡•Å‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§á‡§∏ ‡§™‡§∞ ‡§ö‡§∞‡•ç‡§ö‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§ï‡•ã‡§à ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§µ‡§ø‡§∑‡§Ø ‡§∏‡•Å‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?"
      ],
      reading: [
        "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§ï‡•Å‡§õ ‡§î‡§∞ ‡§™‡§¢‡§º‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§á‡§∏ ‡§™‡§æ‡§† ‡§™‡§∞ ‡§ö‡§∞‡•ç‡§ö‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§ï‡•ã‡§à ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§µ‡§ø‡§∑‡§Ø ‡§™‡§¢‡§º‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?"
      ]
    };

    const typeFollowUps = followUps[type as keyof typeof followUps];
    if (typeFollowUps && Math.random() < 0.7) { // 70% chance of follow-up
      return typeFollowUps[Math.floor(Math.random() * typeFollowUps.length)];
    }
    return null;
  }, []);

  const speakText = useCallback((text: string, accent: string) => {
    if ('speechSynthesis' in window) {
      // Cancel any ongoing speech
      speechSynthesis.cancel();
      
      const utterance = new SpeechSynthesisUtterance(text);
      
      // Set language based on selected language
      const languageMap: { [key: string]: string } = {
        'Hindi': 'hi-IN',
        'English': 'en-US',
        'Spanish': 'es-ES',
        'French': 'fr-FR',
        'German': 'de-DE',
        'Chinese': 'zh-CN',
        'Japanese': 'ja-JP',
        'Korean': 'ko-KR',
        'Arabic': 'ar-SA',
        'Russian': 'ru-RU',
        'Portuguese': 'pt-BR',
        'Italian': 'it-IT',
        'Telugu': 'te-IN',
        'Kannada': 'kn-IN',
        'Tamil': 'ta-IN'
      };
      
      utterance.lang = languageMap[selectedLanguage] || 'hi-IN';
      utterance.rate = 0.8; // Slightly slower for clarity
      utterance.volume = 1.0;
      utterance.pitch = 1.0;
      
      // Adjust voice based on tutor personality
      if (selectedTutor) {
        switch (selectedTutor.personality) {
          case 'Warm and professional':
            utterance.rate = 0.75; // Slower, more measured
            utterance.pitch = 0.9; // Slightly lower pitch
            break;
          case 'Energetic and friendly':
            utterance.rate = 0.85; // Faster, more enthusiastic
            utterance.pitch = 1.1; // Slightly higher pitch
            break;
          case 'Scholarly and thorough':
            utterance.rate = 0.7; // Slow and deliberate
            utterance.pitch = 0.95; // Neutral pitch
            break;
          default:
            utterance.rate = 0.8;
            utterance.pitch = 1.0;
        }
      }
      
      utterance.onstart = () => {
        setIsAISpeaking(true);
        toast({
          title: `${selectedTutor?.name || 'Tutor'} is speaking...`,
          description: "Listening to your tutor's response.",
        });
      };
      
      utterance.onend = () => {
        setIsAISpeaking(false);
        // Add a small delay before allowing next interaction
        setTimeout(() => {
          // Optional: Add follow-up question or prompt
          if (messages.length < 3) { // Early in conversation
            const followUp = generateFollowUpQuestion(lessonType);
            if (followUp) {
              setTimeout(() => {
                const followUpMessage: LessonMessage = {
                  id: Date.now().toString(),
                  sender: 'tutor',
                  content: followUp,
                  timestamp: new Date(),
                  type: 'question'
                };
                setMessages(prev => [...prev, followUpMessage]);
                speakText(followUp, selectedTutor?.accent || 'Standard Hindi');
              }, 2000);
            }
          }
        }, 1000);
      };
      
      utterance.onerror = (error) => {
        console.error('Speech synthesis error:', error);
        setIsAISpeaking(false);
        toast({
          title: "Speech Error",
          description: "Failed to speak the response. Please continue with text.",
          variant: "destructive"
        });
      };
      
      speechSynthesis.speak(utterance);
    }
  }, [selectedLanguage, selectedTutor, messages.length, lessonType, generateFollowUpQuestion, toast]);

  const generateAIResponse = useCallback((userInput: string, tutor: TutorProfile, type: string): string => {
    const userInputLower = userInput.toLowerCase();
    
    // More sophisticated responses based on lesson type and user input
    const responses = {
      conversation: {
        greetings: [
          "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§ï‡•à‡§∏‡•á ‡§π‡•à‡§Ç ‡§Ü‡§™? ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?",
          "‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! ‡§Ü‡§ú ‡§π‡§Æ ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡§Ç?",
          "‡§π‡•à‡§≤‡•ã! ‡§Ü‡§™‡§ï‡§æ ‡§¶‡§ø‡§® ‡§ï‡•à‡§∏‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à? ‡§ö‡§≤‡§ø‡§è ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§"
        ],
        weather: [
          "‡§Ü‡§ú ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•à‡§∏‡§æ ‡§π‡•à? ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§¨‡§æ‡§π‡§∞ ‡§ú‡§æ‡§®‡•á ‡§ï‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¨‡§®‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç?",
          "‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§®‡§æ ‡§è‡§ï ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§µ‡§ø‡§∑‡§Ø ‡§π‡•à‡•§ ‡§Ü‡§™ ‡§ï‡§ø‡§∏ ‡§Æ‡•å‡§∏‡§Æ ‡§Æ‡•á‡§Ç ‡§∏‡§¨‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§∏‡§π‡§ú ‡§Æ‡§π‡§∏‡•Ç‡§∏ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?",
          "‡§π‡§æ‡§Å, ‡§Æ‡•å‡§∏‡§Æ ‡§¨‡§π‡•Å‡§§ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à‡•§ ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§™‡§∏‡§Ç‡§¶ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç - ‡§ó‡§∞‡•ç‡§Æ‡•Ä ‡§Ø‡§æ ‡§∏‡§∞‡•ç‡§¶‡•Ä?"
        ],
        food: [
          "‡§≠‡•ã‡§ú‡§® ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç! ‡§Ü‡§™‡§ï‡§æ ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§≠‡•ã‡§ú‡§® ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
          "‡§ñ‡§æ‡§®‡§æ ‡§è‡§ï ‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§µ‡§ø‡§∑‡§Ø ‡§π‡•à‡•§ ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§™‡§ï‡§æ‡§§‡•á ‡§π‡•à‡§Ç?",
          "‡§π‡§æ‡§Å, ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ñ‡§æ‡§®‡§æ ‡§¨‡§π‡•Å‡§§ ‡§∏‡•ç‡§µ‡§æ‡§¶‡§ø‡§∑‡•ç‡§ü ‡§π‡•à‡•§ ‡§Ü‡§™ ‡§ï‡•å‡§® ‡§∏‡§æ ‡§µ‡•ç‡§Ø‡§Ç‡§ú‡§® ‡§™‡§∏‡§Ç‡§¶ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?"
        ],
        family: [
          "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§™‡§ï‡•á ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§§‡§®‡•á ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§π‡•à‡§Ç?",
          "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§¨‡§π‡•Å‡§§ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à‡•§ ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•á ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡§®‡§æ ‡§™‡§∏‡§Ç‡§¶ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?",
          "‡§π‡§æ‡§Å, ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§π‡§Æ‡§æ‡§∞‡§æ ‡§∏‡§¨‡§∏‡•á ‡§¨‡§°‡§º‡§æ ‡§∏‡§π‡§æ‡§∞‡§æ ‡§π‡•à‡•§ ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•á ‡§Æ‡§æ‡§§‡§æ-‡§™‡§ø‡§§‡§æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ï‡•à‡§∏‡•á ‡§∏‡§Æ‡§Ø ‡§¨‡§ø‡§§‡§æ‡§§‡•á ‡§π‡•à‡§Ç?"
        ],
        work: [
          "‡§ï‡§æ‡§Æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?",
          "‡§™‡•á‡§∂‡§æ ‡§¨‡§π‡•Å‡§§ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à‡•§ ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•á ‡§ï‡§æ‡§Æ ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§™‡§∏‡§Ç‡§¶ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?",
          "‡§π‡§æ‡§Å, ‡§ï‡§æ‡§Æ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§ú‡•Ä‡§µ‡§® ‡§ï‡§æ ‡§è‡§ï ‡§¨‡§°‡§º‡§æ ‡§π‡§ø‡§∏‡•ç‡§∏‡§æ ‡§π‡•à‡•§ ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•á ‡§ï‡§æ‡§Æ ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§ö‡•Å‡§®‡•å‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§∏‡§æ‡§Æ‡§®‡§æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?"
        ],
        default: [
          "‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ! ‡§Ü‡§™‡§ï‡§æ ‡§â‡§ö‡•ç‡§ö‡§æ‡§∞‡§£ ‡§∏‡•Å‡§ß‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à‡•§",
          "‡§Ø‡§π ‡§∏‡§π‡•Ä ‡§π‡•à! ‡§Ö‡§¨ ‡§á‡§∏ ‡§µ‡§æ‡§ï‡•ç‡§Ø ‡§ï‡•ã ‡§•‡•ã‡§°‡§º‡§æ ‡§¨‡§¶‡§≤‡§ï‡§∞ ‡§¨‡•ã‡§≤‡•á‡§Ç‡•§",
          "‡§∂‡§æ‡§®‡§¶‡§æ‡§∞! ‡§Ü‡§™ ‡§§‡•á‡§ú‡•Ä ‡§∏‡•á ‡§∏‡•Ä‡§ñ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§",
          "‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏! ‡§•‡•ã‡§°‡§º‡§æ ‡§î‡§∞ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§¨‡•ã‡§≤‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§",
          "‡§Ø‡§π ‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•à! ‡§Ü‡§™ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§§‡§∞‡§π ‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§",
          "‡§¨‡§π‡•Å‡§§ ‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ! ‡§Ü‡§™‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§æ‡§ï‡§∞‡§£ ‡§∏‡§π‡•Ä ‡§π‡•à‡•§",
          "‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§ï‡§æ‡§Æ! ‡§Ü‡§™ ‡§®‡§à ‡§∂‡§¨‡•ç‡§¶‡§æ‡§µ‡§≤‡•Ä ‡§∏‡•Ä‡§ñ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§"
        ]
      },
      grammar: {
        questions: [
          "‡§Ø‡§π ‡§è‡§ï ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§π‡•à‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§á‡§∏ ‡§µ‡§æ‡§ï‡•ç‡§Ø ‡§Æ‡•á‡§Ç ‡§µ‡•ç‡§Ø‡§æ‡§ï‡§∞‡§£ ‡§ï‡•Ä ‡§ó‡§≤‡§§‡•Ä ‡§¢‡•Ç‡§Ç‡§¢ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç?",
          "‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ! ‡§Ö‡§¨ ‡§á‡§∏ ‡§µ‡§æ‡§ï‡•ç‡§Ø ‡§ï‡•ã ‡§∏‡§π‡•Ä ‡§ï‡§∞‡•á‡§Ç‡•§",
          "‡§Ø‡§π ‡§∏‡§π‡•Ä ‡§π‡•à! ‡§Ø‡§π ‡§µ‡•ç‡§Ø‡§æ‡§ï‡§∞‡§£ ‡§®‡§ø‡§Ø‡§Æ ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•á‡§Ç‡•§"
        ],
        corrections: [
          "‡§∏‡§π‡•Ä ‡§π‡•à! ‡§Ø‡§π‡§æ‡§Å '‡§ï‡§æ' ‡§ï‡•Ä ‡§ú‡§ó‡§π '‡§ï‡•Ä' ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§",
          "‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ! ‡§Ü‡§™‡§®‡•á ‡§∏‡§π‡•Ä ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡§ø‡§Ø‡§æ‡•§",
          "‡§Ø‡§π ‡§∏‡§π‡•Ä ‡§π‡•à! ‡§Ö‡§¨ ‡§á‡§∏ ‡§®‡§ø‡§Ø‡§Æ ‡§ï‡§æ ‡§î‡§∞ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§"
        ],
        explanations: [
          "‡§Ø‡§π ‡§µ‡•ç‡§Ø‡§æ‡§ï‡§∞‡§£ ‡§®‡§ø‡§Ø‡§Æ ‡§á‡§∏ ‡§§‡§∞‡§π ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à...",
          "‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§Ø‡§π ‡§®‡§ø‡§Ø‡§Æ ‡§¨‡§π‡•Å‡§§ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à‡•§",
          "‡§á‡§∏ ‡§®‡§ø‡§Ø‡§Æ ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•Å‡§õ ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§¶‡•á‡§ñ‡§§‡•á ‡§π‡•à‡§Ç‡•§"
        ],
        default: [
          "‡§∏‡§π‡•Ä ‡§π‡•à! ‡§Ø‡§π ‡§µ‡•ç‡§Ø‡§æ‡§ï‡§∞‡§£ ‡§®‡§ø‡§Ø‡§Æ ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•á‡§Ç‡•§",
          "‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ! ‡§Ö‡§¨ ‡§á‡§∏ ‡§®‡§ø‡§Ø‡§Æ ‡§ï‡§æ ‡§î‡§∞ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§",
          "‡§Ø‡§π ‡§∏‡§π‡•Ä ‡§π‡•à! ‡§Ü‡§™ ‡§µ‡•ç‡§Ø‡§æ‡§ï‡§∞‡§£ ‡§∏‡§Æ‡§ù ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§",
          "‡§Ö‡§ö‡•ç‡§õ‡§æ! ‡§Ö‡§¨ ‡§á‡§∏ ‡§µ‡§æ‡§ï‡•ç‡§Ø ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä ‡§¢‡•Ç‡§Ç‡§¢‡•á‡§Ç‡•§",
          "‡§¨‡§π‡•Å‡§§ ‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ! ‡§Ü‡§™‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§æ‡§ï‡§∞‡§£ ‡§ú‡•ç‡§û‡§æ‡§® ‡§¨‡§¢‡§º ‡§∞‡§π‡§æ ‡§π‡•à‡•§"
        ]
      },
      pronunciation: {
        practice: [
          "‡§Ö‡§¨ ‡§á‡§∏ ‡§∂‡§¨‡•ç‡§¶ ‡§ï‡•ã ‡§ß‡•Ä‡§∞‡•á-‡§ß‡•Ä‡§∞‡•á ‡§¨‡•ã‡§≤‡•á‡§Ç: '‡§∂‡•Å‡§≠‡§ï‡§æ‡§Æ‡§®‡§æ‡§è‡§Ç'",
          "‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ! ‡§Ö‡§¨ '‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶' ‡§∂‡§¨‡•ç‡§¶ ‡§ï‡§æ ‡§â‡§ö‡•ç‡§ö‡§æ‡§∞‡§£ ‡§ï‡§∞‡•á‡§Ç‡•§",
          "‡§Ø‡§π ‡§∏‡§π‡•Ä ‡§π‡•à! ‡§Ö‡§¨ '‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à' ‡§¨‡•ã‡§≤‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§"
        ],
        feedback: [
          "‡§â‡§ö‡•ç‡§ö‡§æ‡§∞‡§£ ‡§∏‡§π‡•Ä ‡§π‡•à! ‡§Ö‡§¨ ‡§á‡§∏‡•á ‡§•‡•ã‡§°‡§º‡§æ ‡§ß‡•Ä‡§Æ‡•á ‡§¨‡•ã‡§≤‡•á‡§Ç‡•§",
          "‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ! ‡§Ü‡§™‡§ï‡§æ ‡§â‡§ö‡•ç‡§ö‡§æ‡§∞‡§£ ‡§∏‡•Å‡§ß‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à‡•§",
          "‡§Ø‡§π ‡§∏‡§π‡•Ä ‡§π‡•à! ‡§Ö‡§¨ ‡§á‡§∏ ‡§∂‡§¨‡•ç‡§¶ ‡§ï‡•ã ‡§¶‡•ã‡§π‡§∞‡§æ‡§è‡§Ç‡•§",
          "‡§∂‡§æ‡§®‡§¶‡§æ‡§∞! ‡§Ü‡§™‡§ï‡§æ ‡§â‡§ö‡•ç‡§ö‡§æ‡§∞‡§£ ‡§¨‡§ø‡§≤‡•ç‡§ï‡•Å‡§≤ ‡§∏‡§π‡•Ä ‡§π‡•à‡•§",
          "‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏! ‡§•‡•ã‡§°‡§º‡§æ ‡§î‡§∞ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§¨‡•ã‡§≤‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§"
        ],
        default: [
          "‡§â‡§ö‡•ç‡§ö‡§æ‡§∞‡§£ ‡§∏‡§π‡•Ä ‡§π‡•à! ‡§Ö‡§¨ ‡§á‡§∏‡•á ‡§•‡•ã‡§°‡§º‡§æ ‡§ß‡•Ä‡§Æ‡•á ‡§¨‡•ã‡§≤‡•á‡§Ç‡•§",
          "‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ! ‡§Ü‡§™‡§ï‡§æ ‡§â‡§ö‡•ç‡§ö‡§æ‡§∞‡§£ ‡§∏‡•Å‡§ß‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à‡•§",
          "‡§Ø‡§π ‡§∏‡§π‡•Ä ‡§π‡•à! ‡§Ö‡§¨ ‡§á‡§∏ ‡§∂‡§¨‡•ç‡§¶ ‡§ï‡•ã ‡§¶‡•ã‡§π‡§∞‡§æ‡§è‡§Ç‡•§",
          "‡§∂‡§æ‡§®‡§¶‡§æ‡§∞! ‡§Ü‡§™‡§ï‡§æ ‡§â‡§ö‡•ç‡§ö‡§æ‡§∞‡§£ ‡§¨‡§ø‡§≤‡•ç‡§ï‡•Å‡§≤ ‡§∏‡§π‡•Ä ‡§π‡•à‡•§"
        ]
      },
      vocabulary: {
        newWords: [
          "‡§Ø‡§π ‡§è‡§ï ‡§®‡§Ø‡§æ ‡§∂‡§¨‡•ç‡§¶ ‡§π‡•à‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§á‡§∏‡§ï‡§æ ‡§Ö‡§∞‡•ç‡§• ‡§ú‡§æ‡§®‡§§‡•á ‡§π‡•à‡§Ç?",
          "‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ! ‡§Ö‡§¨ ‡§á‡§∏ ‡§∂‡§¨‡•ç‡§¶ ‡§ï‡§æ ‡§µ‡§æ‡§ï‡•ç‡§Ø ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§",
          "‡§Ø‡§π ‡§∏‡§π‡•Ä ‡§π‡•à! ‡§Ø‡§π ‡§∂‡§¨‡•ç‡§¶ ‡§¨‡§π‡•Å‡§§ ‡§â‡§™‡§Ø‡•ã‡§ó‡•Ä ‡§π‡•à‡•§"
        ],
        explanations: [
          "‡§á‡§∏ ‡§∂‡§¨‡•ç‡§¶ ‡§ï‡§æ ‡§Ö‡§∞‡•ç‡§• ‡§π‡•à...",
          "‡§Ø‡§π ‡§∂‡§¨‡•ç‡§¶ ‡§á‡§∏ ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠ ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§π‡•ã‡§§‡§æ ‡§π‡•à...",
          "‡§á‡§∏ ‡§∂‡§¨‡•ç‡§¶ ‡§ï‡•á ‡§ï‡§à ‡§Ö‡§∞‡•ç‡§• ‡§π‡•à‡§Ç..."
        ],
        default: [
          "‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ! ‡§Ü‡§™ ‡§®‡§à ‡§∂‡§¨‡•ç‡§¶‡§æ‡§µ‡§≤‡•Ä ‡§∏‡•Ä‡§ñ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§",
          "‡§Ø‡§π ‡§∏‡§π‡•Ä ‡§π‡•à! ‡§Ø‡§π ‡§∂‡§¨‡•ç‡§¶ ‡§¨‡§π‡•Å‡§§ ‡§â‡§™‡§Ø‡•ã‡§ó‡•Ä ‡§π‡•à‡•§",
          "‡§∂‡§æ‡§®‡§¶‡§æ‡§∞! ‡§Ü‡§™‡§ï‡•Ä ‡§∂‡§¨‡•ç‡§¶‡§æ‡§µ‡§≤‡•Ä ‡§¨‡§¢‡§º ‡§∞‡§π‡•Ä ‡§π‡•à‡•§",
          "‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§ï‡§æ‡§Æ! ‡§Ö‡§¨ ‡§á‡§∏ ‡§∂‡§¨‡•ç‡§¶ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§"
        ]
      },
      writing: {
        prompts: [
          "‡§Ö‡§¨ ‡§è‡§ï ‡§õ‡•ã‡§ü‡§æ ‡§®‡§ø‡§¨‡§Ç‡§ß ‡§≤‡§ø‡§ñ‡•á‡§Ç‡•§",
          "‡§á‡§∏ ‡§µ‡§ø‡§∑‡§Ø ‡§™‡§∞ ‡§Ö‡§™‡§®‡•á ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§≤‡§ø‡§ñ‡•á‡§Ç‡•§",
          "‡§è‡§ï ‡§™‡§§‡•ç‡§∞ ‡§≤‡§ø‡§ñ‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§"
        ],
        feedback: [
          "‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§≤‡•á‡§ñ‡§®! ‡§ï‡•Å‡§õ ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§",
          "‡§Ø‡§π ‡§∏‡§π‡•Ä ‡§π‡•à! ‡§Ü‡§™‡§ï‡§æ ‡§≤‡•á‡§ñ‡§® ‡§∏‡•Å‡§ß‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à‡•§",
          "‡§∂‡§æ‡§®‡§¶‡§æ‡§∞! ‡§Ü‡§™‡§ï‡§æ ‡§≤‡•á‡§ñ‡§® ‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•à‡•§"
        ],
        default: [
          "‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§≤‡•á‡§ñ‡§®! ‡§ï‡•Å‡§õ ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§",
          "‡§Ø‡§π ‡§∏‡§π‡•Ä ‡§π‡•à! ‡§Ü‡§™‡§ï‡§æ ‡§≤‡•á‡§ñ‡§® ‡§∏‡•Å‡§ß‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à‡•§",
          "‡§∂‡§æ‡§®‡§¶‡§æ‡§∞! ‡§Ü‡§™‡§ï‡§æ ‡§≤‡•á‡§ñ‡§® ‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•à‡•§",
          "‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§ï‡§æ‡§Æ! ‡§Ö‡§¨ ‡§á‡§∏‡•á ‡§î‡§∞ ‡§¨‡•á‡§π‡§§‡§∞ ‡§¨‡§®‡§æ‡§è‡§Ç‡•§"
        ]
      },
      listening: {
        comprehension: [
          "‡§Ö‡§¨ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§∏‡•á ‡§∏‡•Å‡§®‡•á‡§Ç ‡§î‡§∞ ‡§´‡§ø‡§∞ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§Ç‡•§",
          "‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ! ‡§Ü‡§™‡§®‡•á ‡§∏‡§π‡•Ä ‡§∏‡•Å‡§®‡§æ‡•§",
          "‡§Ø‡§π ‡§∏‡§π‡•Ä ‡§π‡•à! ‡§Ö‡§¨ ‡§á‡§∏ ‡§™‡§∞ ‡§ö‡§∞‡•ç‡§ö‡§æ ‡§ï‡§∞‡•á‡§Ç‡•§"
        ],
        default: [
          "‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ! ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡•Å‡§®‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§¨‡§¢‡§º ‡§∞‡§π‡•Ä ‡§π‡•à‡•§",
          "‡§Ø‡§π ‡§∏‡§π‡•Ä ‡§π‡•à! ‡§Ö‡§¨ ‡§á‡§∏ ‡§™‡§∞ ‡§ö‡§∞‡•ç‡§ö‡§æ ‡§ï‡§∞‡•á‡§Ç‡•§",
          "‡§∂‡§æ‡§®‡§¶‡§æ‡§∞! ‡§Ü‡§™‡§®‡•á ‡§∏‡§π‡•Ä ‡§∏‡§Æ‡§ù‡§æ‡•§"
        ]
      },
      reading: {
        comprehension: [
          "‡§Ö‡§¨ ‡§á‡§∏ ‡§™‡§æ‡§† ‡§ï‡•ã ‡§™‡§¢‡§º‡•á‡§Ç ‡§î‡§∞ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§Ç‡•§",
          "‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ! ‡§Ü‡§™‡§®‡•á ‡§∏‡§π‡•Ä ‡§™‡§¢‡§º‡§æ‡•§",
          "‡§Ø‡§π ‡§∏‡§π‡•Ä ‡§π‡•à! ‡§Ö‡§¨ ‡§á‡§∏ ‡§™‡§∞ ‡§ö‡§∞‡•ç‡§ö‡§æ ‡§ï‡§∞‡•á‡§Ç‡•§"
        ],
        default: [
          "‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ! ‡§Ü‡§™‡§ï‡•Ä ‡§™‡§¢‡§º‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§¨‡§¢‡§º ‡§∞‡§π‡•Ä ‡§π‡•à‡•§",
          "‡§Ø‡§π ‡§∏‡§π‡•Ä ‡§π‡•à! ‡§Ö‡§¨ ‡§á‡§∏ ‡§™‡§∞ ‡§ö‡§∞‡•ç‡§ö‡§æ ‡§ï‡§∞‡•á‡§Ç‡•§",
          "‡§∂‡§æ‡§®‡§¶‡§æ‡§∞! ‡§Ü‡§™‡§®‡•á ‡§∏‡§π‡•Ä ‡§∏‡§Æ‡§ù‡§æ‡•§"
        ]
      }
    };

    const typeResponses = responses[type as keyof typeof responses];
    if (!typeResponses) return "‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ! ‡§Ü‡§™ ‡§∏‡•Ä‡§ñ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§";

    // Check for specific keywords in user input
    if (type === 'conversation') {
      if (userInputLower.includes('‡§®‡§Æ‡§∏‡•ç‡§§‡•á') || userInputLower.includes('‡§π‡•à‡§≤‡•ã') || userInputLower.includes('hi')) {
        return typeResponses.greetings[Math.floor(Math.random() * typeResponses.greetings.length)];
      }
      if (userInputLower.includes('‡§Æ‡•å‡§∏‡§Æ') || userInputLower.includes('weather')) {
        return typeResponses.weather[Math.floor(Math.random() * typeResponses.weather.length)];
      }
      if (userInputLower.includes('‡§ñ‡§æ‡§®‡§æ') || userInputLower.includes('‡§≠‡•ã‡§ú‡§®') || userInputLower.includes('food')) {
        return typeResponses.food[Math.floor(Math.random() * typeResponses.food.length)];
      }
      if (userInputLower.includes('‡§™‡§∞‡§ø‡§µ‡§æ‡§∞') || userInputLower.includes('family')) {
        return typeResponses.family[Math.floor(Math.random() * typeResponses.family.length)];
      }
      if (userInputLower.includes('‡§ï‡§æ‡§Æ') || userInputLower.includes('work') || userInputLower.includes('job')) {
        return typeResponses.work[Math.floor(Math.random() * typeResponses.work.length)];
      }
    }

    if (type === 'grammar') {
      if (userInputLower.includes('‡§™‡•ç‡§∞‡§∂‡•ç‡§®') || userInputLower.includes('question')) {
        return typeResponses.questions[Math.floor(Math.random() * typeResponses.questions.length)];
      }
      if (userInputLower.includes('‡§∏‡•Å‡§ß‡§æ‡§∞') || userInputLower.includes('correction')) {
        return typeResponses.corrections[Math.floor(Math.random() * typeResponses.corrections.length)];
      }
    }

    if (type === 'pronunciation') {
      if (userInputLower.includes('‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏') || userInputLower.includes('practice')) {
        return typeResponses.practice[Math.floor(Math.random() * typeResponses.practice.length)];
      }
    }

    if (type === 'vocabulary') {
      if (userInputLower.includes('‡§®‡§Ø‡§æ') || userInputLower.includes('new') || userInputLower.includes('‡§∂‡§¨‡•ç‡§¶')) {
        return typeResponses.newWords[Math.floor(Math.random() * typeResponses.newWords.length)];
      }
    }

    // Return default response for the lesson type
    const defaultResponses = typeResponses.default || typeResponses;
    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
  }, []);

  const sendMessage = useCallback((content: string) => {
    if (!content.trim() || !currentSession) return;

    const userMessage: LessonMessage = {
      id: Date.now().toString(),
      sender: 'student',
      content,
      timestamp: new Date(),
      type: 'text'
    };

    setMessages(prev => [...prev, userMessage]);
    setUserInput("");

    // Generate AI response
    setTimeout(() => {
      const aiResponse = generateAIResponse(content, selectedTutor!, lessonType);
      const tutorMessage: LessonMessage = {
        id: (Date.now() + 1).toString(),
        sender: 'tutor',
        content: aiResponse,
        timestamp: new Date(),
        type: 'text'
      };
      setMessages(prev => [...prev, tutorMessage]);
      speakText(aiResponse, selectedTutor!.accent);
    }, 1000);
  }, [currentSession, selectedTutor, lessonType, generateAIResponse, speakText]);

  const startVoiceRecognition = useCallback(() => {
    if (!recognition) {
      toast({
        title: "Voice Recognition Not Available",
        description: "Your browser doesn't support voice recognition. Please use text input.",
        variant: "destructive"
      });
      return;
    }

    try {
      // Stop any ongoing speech synthesis
      if ('speechSynthesis' in window) {
        speechSynthesis.cancel();
      }

      recognition.onstart = () => {
        setIsListening(true);
        toast({
          title: "Listening...",
          description: "Speak now! I'm listening to your voice.",
        });
      };

      recognition.onresult = (event: any) => {
        const transcript = Array.from(event.results)
          .map((result: any) => result[0])
          .map(result => result.transcript)
          .join('');
        
        setUserInput(transcript);
        
        // Auto-send after a short delay if there's content
        if (transcript.trim()) {
          setTimeout(() => {
            sendMessage(transcript);
          }, 1000);
        }
      };

      recognition.onerror = (event: any) => {
        console.error('Speech recognition error:', event.error);
        setIsListening(false);
        
        let errorMessage = "Voice recognition error. Please try again.";
        switch (event.error) {
          case 'no-speech':
            errorMessage = "No speech detected. Please speak clearly.";
            break;
          case 'audio-capture':
            errorMessage = "Microphone not available. Please check your microphone.";
            break;
          case 'not-allowed':
            errorMessage = "Microphone access denied. Please allow microphone access.";
            break;
          case 'network':
            errorMessage = "Network error. Please check your internet connection.";
            break;
          default:
            errorMessage = "Voice recognition error. Please use text input.";
        }
        
        toast({
          title: "Voice Recognition Error",
          description: errorMessage,
          variant: "destructive"
        });
      };

      recognition.onend = () => {
        setIsListening(false);
        toast({
          title: "Voice Recognition Stopped",
          description: "Voice recognition has stopped. You can start again or use text input.",
        });
      };

      // Set language based on selected language
      const languageMap: { [key: string]: string } = {
        'Hindi': 'hi-IN',
        'English': 'en-US',
        'Spanish': 'es-ES',
        'French': 'fr-FR',
        'German': 'de-DE',
        'Chinese': 'zh-CN',
        'Japanese': 'ja-JP',
        'Korean': 'ko-KR',
        'Arabic': 'ar-SA',
        'Russian': 'ru-RU',
        'Portuguese': 'pt-BR',
        'Italian': 'it-IT',
        'Telugu': 'te-IN',
        'Kannada': 'kn-IN',
        'Tamil': 'ta-IN'
      };

      recognition.lang = languageMap[selectedLanguage] || 'hi-IN';
      recognition.continuous = false;
      recognition.interimResults = false;
      recognition.maxAlternatives = 1;
      
      recognition.start();
    } catch (error) {
      console.error('Error starting voice recognition:', error);
      setIsListening(false);
      toast({
        title: "Voice Recognition Error",
        description: "Failed to start voice recognition. Please use text input.",
        variant: "destructive"
      });
    }
  }, [recognition, selectedLanguage, sendMessage, toast]);

  const endSession = useCallback(() => {
    if (currentSession) {
      const updatedSession = { ...currentSession, completed: true, completedAt: new Date() };
      setCurrentSession(updatedSession);
    }
    setSessionActive(false);
    setMessages([]);
    setSelectedTutor(null);
    
    if ('speechSynthesis' in window) {
      speechSynthesis.cancel();
    }

    toast({
      title: "Lesson Completed!",
      description: "Great job! Your lesson has been completed.",
    });
  }, [currentSession, toast]);

  const rateSession = useCallback((rating: number) => {
    if (currentSession) {
      const updatedSession = { ...currentSession, rating };
      setCurrentSession(updatedSession);
      
      toast({
        title: "Thank You!",
        description: `You rated this lesson ${rating} stars.`,
      });
    }
  }, [currentSession, toast]);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="text-center space-y-2">
        <h1 className="text-3xl font-bold gradient-text">Private AI Lessons</h1>
        <p className="text-muted-foreground">One-on-one personalized tutoring sessions</p>
      </div>

      {/* Stats Overview */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <Card className="text-center p-4">
          <div className="text-2xl font-bold text-primary">{stats.totalLessons}</div>
          <div className="text-sm text-muted-foreground">Total Lessons</div>
        </Card>
        <Card className="text-center p-4">
          <div className="text-2xl font-bold text-secondary">{stats.totalTime}</div>
          <div className="text-sm text-muted-foreground">Minutes Learned</div>
        </Card>
        <Card className="text-center p-4">
          <div className="text-2xl font-bold text-accent">{stats.averageRating}</div>
          <div className="text-sm text-muted-foreground">Average Rating</div>
        </Card>
        <Card className="text-center p-4">
          <div className="text-2xl font-bold text-green-500">{stats.currentStreak}</div>
          <div className="text-sm text-muted-foreground">Day Streak</div>
        </Card>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="sessions">Sessions</TabsTrigger>
          <TabsTrigger value="tutors">Tutors</TabsTrigger>
          <TabsTrigger value="active">Active Lesson</TabsTrigger>
        </TabsList>

        <TabsContent value="sessions" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {lessonTypes.map((type) => (
              <Card key={type.id} className="hover:shadow-lg transition-all duration-300">
                <CardHeader>
                  <div className="flex items-center gap-2">
                    <type.icon className="w-5 h-5 text-primary" />
                    <CardTitle className="text-lg">{type.name}</CardTitle>
                  </div>
                  <CardDescription>{type.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-muted-foreground">Duration:</span>
                      <Badge variant="outline">{sessionDuration} min</Badge>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-muted-foreground">Language:</span>
                      <Badge variant="secondary">{selectedLanguage}</Badge>
                    </div>
                    <Button 
                      onClick={() => {
                        setActiveTab("tutors");
                        setSelectedLessonType(type.id);
                      }}
                      className="w-full"
                    >
                      Choose Tutor
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="tutors" className="space-y-4">
          {selectedLessonType && (
            <div className="mb-4 p-4 bg-primary/10 rounded-lg border border-primary/20">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <BookOpen className="w-5 h-5 text-primary" />
                  <span className="font-medium">Selected Lesson Type:</span>
                  <Badge variant="secondary" className="capitalize">
                    {selectedLessonType}
                  </Badge>
                </div>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => setActiveTab("sessions")}
                >
                  Back to Sessions
                </Button>
              </div>
            </div>
          )}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {tutors.map((tutor) => (
              <Card key={tutor.id} className="hover:shadow-lg transition-all duration-300">
                <CardHeader>
                  <div className="flex items-center gap-3">
                    <div className="text-3xl">{tutor.avatar}</div>
                    <div>
                      <CardTitle className="text-lg">{tutor.name}</CardTitle>
                      <div className="flex items-center gap-1">
                        <Star className="w-4 h-4 text-yellow-500 fill-current" />
                        <span className="text-sm">{tutor.rating}</span>
                      </div>
                    </div>
                  </div>
                  <CardDescription>{tutor.bio}</CardDescription>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div>
                    <h4 className="font-medium mb-2">Specialties:</h4>
                    <div className="flex flex-wrap gap-1">
                      {tutor.specialty.map((skill) => (
                        <Badge key={skill} variant="secondary" className="text-xs">
                          {skill}
                        </Badge>
                      ))}
                    </div>
                  </div>
                  <div>
                    <h4 className="font-medium mb-2">Availability:</h4>
                    <div className="text-sm text-muted-foreground">
                      {tutor.availability.join(', ')}
                    </div>
                  </div>
                  <div className="flex gap-2">
                    <Button 
                      onClick={() => startLesson(tutor, selectedLessonType)}
                      className="flex-1"
                    >
                      Start Lesson
                    </Button>
                    <Button variant="outline" className="flex-1">
                      View Profile
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="active" className="space-y-4">
          {sessionActive && currentSession && selectedTutor ? (
            <div className="space-y-4">
              {/* Session Info */}
              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div>
                      <CardTitle>{currentSession.title}</CardTitle>
                      <CardDescription>with {selectedTutor.name}</CardDescription>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge variant="outline">{currentSession.type}</Badge>
                      <Badge variant="secondary">{sessionDuration} min</Badge>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
                      <span className="text-sm text-green-600">Session Active</span>
                    </div>
                    <Button onClick={endSession} variant="destructive" size="sm">
                      End Session
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* Chat Interface */}
              <Card className="h-96">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle>Lesson Chat</CardTitle>
                    {isAISpeaking && (
                      <div className="flex items-center gap-2 text-green-600">
                        <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                        <span className="text-sm">Tutor speaking...</span>
                      </div>
                    )}
                  </div>
                </CardHeader>
                <CardContent className="h-80 overflow-y-auto space-y-4">
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex ${message.sender === 'student' ? 'justify-end' : 'justify-start'}`}
                    >
                      <div
                        className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                          message.sender === 'student'
                            ? 'bg-primary text-primary-foreground'
                            : 'bg-muted'
                        }`}
                      >
                        <div className="flex items-center gap-2 mb-1">
                          {message.sender === 'tutor' && (
                            <div className="text-lg">{selectedTutor.avatar}</div>
                          )}
                          <span className="text-xs opacity-70">
                            {message.sender === 'student' ? 'You' : selectedTutor.name}
                          </span>
                          {message.type === 'question' && (
                            <Badge variant="outline" className="text-xs">Question</Badge>
                          )}
                        </div>
                        <p>{message.content}</p>
                        {message.translation && (
                          <p className="text-xs opacity-70 mt-1 italic">
                            {message.translation}
                          </p>
                        )}
                        {message.feedback && (
                          <p className="text-xs text-green-600 mt-1">
                            ‚úÖ {message.feedback}
                          </p>
                        )}
                      </div>
                    </div>
                  ))}
                  <div ref={messagesEndRef} />
                </CardContent>
              </Card>

              {/* Input Area */}
              <Card>
                <CardContent className="pt-6">
                  <div className="flex gap-2">
                    <Input
                      value={userInput}
                      onChange={(e) => setUserInput(e.target.value)}
                      placeholder={isListening ? "Listening..." : "Type your message..."}
                      onKeyPress={(e) => e.key === 'Enter' && sendMessage(userInput)}
                      className="flex-1"
                      disabled={isAISpeaking}
                    />
                    <Button
                      onClick={startVoiceRecognition}
                      variant={isListening ? "destructive" : "outline"}
                      size="icon"
                      disabled={isAISpeaking}
                    >
                      {isListening ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
                    </Button>
                    <Button 
                      onClick={() => sendMessage(userInput)} 
                      size="icon"
                      disabled={isAISpeaking || !userInput.trim()}
                    >
                      <Send className="w-4 h-4" />
                    </Button>
                  </div>
                  {isListening && (
                    <div className="mt-2 text-center">
                      <div className="flex items-center justify-center gap-2 text-blue-600">
                        <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                        <span className="text-sm">Listening... Speak now!</span>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Session Controls */}
              <div className="flex justify-center gap-4">
                <Button variant="outline" onClick={() => rateSession(5)}>
                  <Star className="w-4 h-4 mr-2" />
                  Rate 5 Stars
                </Button>
                <Button variant="outline" onClick={() => rateSession(4)}>
                  <Star className="w-4 h-4 mr-2" />
                  Rate 4 Stars
                </Button>
                <Button variant="outline" onClick={() => rateSession(3)}>
                  <Star className="w-4 h-4 mr-2" />
                  Rate 3 Stars
                </Button>
              </div>
            </div>
          ) : (
            <Card>
              <CardContent className="pt-6 text-center">
                <div className="text-6xl mb-4">üë®‚Äçüè´</div>
                <h3 className="text-xl font-semibold mb-2">No Active Session</h3>
                <p className="text-muted-foreground mb-4">
                  Start a lesson to begin your personalized tutoring session
                </p>
                <div className="flex gap-2 justify-center">
                  <Button onClick={() => setActiveTab("sessions")}>
                    Choose Lesson Type
                  </Button>
                  <Button variant="outline" onClick={() => setActiveTab("tutors")}>
                    Browse Tutors
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default PrivateLessons; 